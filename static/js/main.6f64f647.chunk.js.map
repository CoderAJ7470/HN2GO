{"version":3,"sources":["CSS/items.module.css","Services/api.js","Components/Item.js","Services/timeConverter.js","Services/scroll.js","Services/classManager.js","Components/Items.js","App.js","serviceWorker.js","index.js","CSS/item.module.css"],"names":["module","exports","baseURL","newItemsURL","topItemsURL","bestItemsURL","itemURL","MAX_ITEMS","GET_MAX_ITEMS","getItem","storyID","a","axios","get","then","data","result","getNewItemIDs","length","getTopItemIDs","getBestItemIDs","Item","memo","id","useState","item","setItem","useEffect","mounted","url","className","itemStyles","aria-hidden","href","target","rel","title","by","unixTimeStamp","dateHelper","Date","year","getFullYear","month","getMonth","date","getDate","hour","getHours","min","getMinutes","timePeriod","toString","convertUnixTime","time","useScrollByIncrementing","incrementing","setIncrementing","count","setCount","resetCount","scrollThePage","window","innerHeight","document","documentElement","scrollTop","offsetHeight","addEventListener","func","wait","immediate","timeout","context","this","args","arguments","later","apply","callNow","clearTimeout","setTimeout","debounce","getElementById","removeEventListener","manageButtonClasses","type","classList","add","itemsStyles","active","remove","Items","itemIDs","setItemIDs","newItems","setNewItems","topItems","setTopItems","bestItems","setBestItems","setType","onClick","slice","map","itemID","key","App","Boolean","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.6f64f647.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"navWrapper\":\"items_navWrapper__M216F\",\"instruction\":\"items_instruction__3JF8G\",\"buttons\":\"items_buttons__2vW2g\",\"showBttButton\":\"items_showBttButton__aoPSE\",\"hideBttButton\":\"items_hideBttButton__1yzmo\",\"inactive\":\"items_inactive__2gAkw\",\"active\":\"items_active__Bzhq1\",\"viewCount\":\"items_viewCount__y5Dzy\"};","import axios from 'axios';\r\n\r\nconst baseURL = 'https://hacker-news.firebaseio.com/v0';\r\nconst newItemsURL = `${baseURL}/newstories.json`;\r\nconst topItemsURL = `${baseURL}/topstories.json`;\r\nconst bestItemsURL = `${baseURL}/beststories.json`;\r\nconst itemURL = `${baseURL}/item`;\r\nlet MAX_ITEMS = '';\r\n\r\nexport function GET_MAX_ITEMS() {\r\n  if(MAX_ITEMS) {\r\n    return MAX_ITEMS;\r\n  }\r\n}\r\n\r\n// export const getUser = async userHandle => {\r\n//   const result = await axios.get(`${baseURL}/${userHandle}`)\r\n//     .then( ({ data }) => data);\r\n\r\n//   console.log('result: ', result);\r\n  \r\n//   return result;\r\n// }\r\n\r\nexport const getItem = async storyID => {\r\n  const result = await axios.get(`${itemURL}/${storyID}.json`)\r\n    .then( ({data}) =>  data);\r\n\r\n  return result;\r\n}\r\n\r\nexport const getNewItemIDs = async () => {\r\n  const result = await axios.get(newItemsURL)\r\n    .then( ({data}) => data);\r\n\r\n  MAX_ITEMS = result.length;\r\n  \r\n  return result;\r\n}\r\n\r\nexport const getTopItemIDs = async () => {\r\n  const result = await axios.get(topItemsURL)\r\n    .then( ({data}) => data);\r\n\r\n  MAX_ITEMS = result.length;\r\n  \r\n  return result;\r\n}\r\n\r\nexport const getBestItemIDs = async () => {\r\n  const result = await axios.get(bestItemsURL)\r\n    .then( ({data}) => data);\r\n\r\n  MAX_ITEMS = result.length;\r\n  \r\n  return result;\r\n}","import React, { useState, useEffect, memo } from 'react';\r\n\r\nimport { getItem } from '../Services/api';\r\nimport { convertUnixTime } from \"../Services/timeConverter\";\r\n\r\nimport itemStyles from '../CSS/item.module.css';\r\n\r\n// Here, we are extracting the value of each ItemID by destructuring the \"id\";\r\n// otherwise, we would need to pass in \"props\" instead of \"id\" and do\r\n// props.id down below\r\nconst Item = memo(function Item({ id }) {\r\n  const [item, setItem] = useState();\r\n\r\n  useEffect(() => {\r\n    let mounted = true;\r\n\r\n    getItem(id)\r\n      .then(data => data && data.url && mounted && setItem(data));\r\n\r\n    return () => mounted = false;\r\n  }, []);\r\n\r\n  return (\r\n    item && item.url ?\r\n      <div className={itemStyles['item']}>\r\n        <p>\r\n          <i className={`fa fa-hand-o-right ${itemStyles['pointRight']}`} aria-hidden=\"true\"></i>\r\n          <a href={item.url} target='_blank' rel=\"noopener noreferrer\">{item.title}</a>\r\n        </p>\r\n        <p>Submitted By: {item.by}</p>\r\n        <p>Posted: {convertUnixTime(item.time)}</p>\r\n      </div> : null\r\n  )\r\n});\r\n\r\nexport default Item;","const CUTOFF = 12;\r\n\r\nexport const convertUnixTime = unixTimeStamp => {\r\n  let dateHelper = new Date(unixTimeStamp * 1000);\r\n  let months = ['Jan','Feb','Mar','Apr','May','Jun','Jul','Aug','Sep','Oct','Nov','Dec'];\r\n  let year = dateHelper.getFullYear();\r\n  let month = months[dateHelper.getMonth()];\r\n  let date = dateHelper.getDate();\r\n  let hour = dateHelper.getHours();\r\n  let min = dateHelper.getMinutes();\r\n  let timePeriod = '';\r\n\r\n  if(hour > 12) {\r\n    hour -= CUTOFF;\r\n    timePeriod = 'p.m.';\r\n  }\r\n  else {\r\n    timePeriod = 'a.m.'\r\n  }\r\n\r\n  if(min.toString().length === 1) {\r\n    min = '0' + min;\r\n  }\r\n\r\n  return ` ${date} ${month}, ${year} at ${hour}:${min} ${timePeriod}`;\r\n}","import { useState, useEffect } from 'react';\r\n\r\nimport { GET_MAX_ITEMS } from '../Services/api';\r\n\r\nconst INCREMENT_VALUE = 20;\r\n\r\nexport const useScrollByIncrementing = () => {\r\n  const [incrementing, setIncrementing] = useState(false);\r\n  const [count, setCount] = useState(INCREMENT_VALUE);\r\n\r\n  const resetCount = () => {\r\n    setCount(20);\r\n  }\r\n\r\n  const scrollThePage = () => {\r\n    if(window.innerHeight + document.documentElement.scrollTop ===\r\n      document.documentElement.offsetHeight) {\r\n        setIncrementing(true);\r\n    }\r\n\r\n    setIncrementing(false);\r\n  };\r\n\r\n  function debounce(func, wait, immediate) {\r\n    let timeout;\r\n    return function() {\r\n      let context = this, args = arguments;\r\n      let later = function() {\r\n        timeout = null;\r\n        if (!immediate) func.apply(context, args);\r\n      };\r\n      let callNow = immediate && !timeout;\r\n      clearTimeout(timeout);\r\n      timeout = setTimeout(later, wait);\r\n      if (callNow) func.apply(context, args);\r\n    };\r\n  };\r\n\r\n  // First useEffect for checking if the user is scrolling the page and incrementing\r\n  // needs to take place\r\n  useEffect(() => {\r\n    if(!incrementing) {\r\n      return;\r\n    }\r\n\r\n    if(count + INCREMENT_VALUE >= GET_MAX_ITEMS) {\r\n      setCount(GET_MAX_ITEMS);\r\n    }\r\n    else {\r\n      if(count < 500) {\r\n        setCount(count + INCREMENT_VALUE);\r\n      }\r\n    }\r\n  }, [count, incrementing]);\r\n\r\n  useEffect(() => {\r\n    window.addEventListener('scroll', debounce(scrollThePage, 250));\r\n\r\n    document.getElementById('new').addEventListener('click', resetCount);\r\n    document.getElementById('top').addEventListener('click', resetCount);\r\n    document.getElementById('popular').addEventListener('click', resetCount);\r\n\r\n    return () => window.removeEventListener('scroll', scrollThePage);\r\n  }, []);\r\n\r\n  return count;\r\n}","import itemsStyles from '../CSS/items.module.css';\r\n\r\nexport function manageButtonClasses(type) {\r\n  switch(type) {\r\n    case 'new':\r\n      document.getElementById('new').classList.add(itemsStyles.active);\r\n      document.getElementById('top').classList.remove(itemsStyles.active);\r\n      document.getElementById('popular').classList.remove(itemsStyles.active);\r\n    break;\r\n\r\n    case 'top':\r\n      document.getElementById('top').classList.add(itemsStyles.active);\r\n      document.getElementById('new').classList.remove(itemsStyles.active);\r\n      document.getElementById('popular').classList.remove(itemsStyles.active);\r\n    break;\r\n\r\n    case 'popular':\r\n      document.getElementById('popular').classList.add(itemsStyles.active);\r\n      document.getElementById('new').classList.remove(itemsStyles.active);\r\n      document.getElementById('top').classList.remove(itemsStyles.active);\r\n    break;\r\n\r\n    default:\r\n      document.getElementById('new').classList.add(itemsStyles.active);\r\n      document.getElementById('top').classList.remove(itemsStyles.active);\r\n      document.getElementById('popular').classList.remove(itemsStyles.active);\r\n  }\r\n}","import React, { useEffect, useState } from 'react';\r\n\r\nimport Item from './Item';\r\n\r\nimport { getNewItemIDs, getTopItemIDs, getBestItemIDs } from '../Services/api';\r\nimport { GET_MAX_ITEMS } from '../Services/api';\r\nimport { useScrollByIncrementing } from '../Services/scroll';\r\nimport { manageButtonClasses } from '../Services/classManager';\r\n\r\nimport itemsStyles from '../CSS/items.module.css';\r\n\r\nconst Items = () => {\r\n  const [itemIDs, setItemIDs] = useState([]);\r\n  const [newItems, setNewItems] = useState(false);\r\n  const [topItems, setTopItems] = useState(false);\r\n  const [bestItems, setBestItems] = useState(false);\r\n  const [type, setType] = useState('New');\r\n\r\n  let count = useScrollByIncrementing();\r\n\r\n  useEffect(() => {\r\n    if(newItems) {\r\n      getNewItemIDs().then(data => {\r\n          setItemIDs(data);\r\n      });\r\n      setType('New');\r\n      manageButtonClasses('new');\r\n    }\r\n    else if(topItems) {\r\n      getTopItemIDs().then(data => {\r\n          setItemIDs(data);\r\n      });\r\n      setType('Trending');\r\n      manageButtonClasses('top');\r\n    }\r\n    else if(bestItems) {\r\n      getBestItemIDs().then(data => {\r\n          setItemIDs(data);\r\n      });\r\n      setType('Popular');\r\n      manageButtonClasses('popular');\r\n    }\r\n    else {\r\n      getNewItemIDs().then(data => {\r\n          setItemIDs(data);\r\n      });\r\n      manageButtonClasses('new');\r\n    }\r\n  }, [newItems, topItems, bestItems]);\r\n\r\n  return (\r\n    <>\r\n      <div className={itemsStyles['navWrapper']}>\r\n        <p className={itemsStyles['instruction']}>\r\n          Search/scroll through stories below. Refresh the page to pull in the latest articles.\r\n        </p>\r\n        <div className={itemsStyles['buttons']}>\r\n          <button className={itemsStyles['inactive']} id='new'\r\n            onClick={() => {setNewItems(true); setTopItems(false); setBestItems(false);}}>Latest</button>\r\n          <button className={itemsStyles['inactive']} id='top'\r\n            onClick={() => {setTopItems(true); setNewItems(false); setBestItems(false);}}>Trending</button>\r\n          <button className={itemsStyles['inactive']} id='popular'\r\n            onClick={() => {setBestItems(true); setNewItems(false); setTopItems(false);}}>Most Popular</button>\r\n        </div>\r\n      </div>\r\n      {itemIDs.slice(0, count + 1).map(itemID => <Item key = {itemID} id = {itemID} />)}\r\n      <div className={itemsStyles['viewCount']}>Showing {count} of {GET_MAX_ITEMS()} {type} items</div>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Items;","import React from 'react';\nimport Items from './Components/Items';\n\nconst App = () => {\n  return (\n    <div className=\"App\">\n      <Items />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();","// extracted by mini-css-extract-plugin\nmodule.exports = {\"pointRight\":\"item_pointRight__2FPdv\",\"item\":\"item_item__2jcg9\"};"],"sourceRoot":""}